{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Karate",
  "scopeName": "source.karate",
  "patterns": [
    {
      "include": "#section"
    },
    {
      "include": "#statement"
    },
    {
      "include": "#data"
    },
    {
      "include": "#tripplequote-expression"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#tag"
    },
    {
      "include": "#text"
    }
  ],
  "repository": {
    "section": {
      "patterns": [
        {
          "match": "^\\s*(Feature|Background|Examples|Scenario|Scenario Outline)(:)(.*)",
          "captures": {
            "1": {
              "name": "keyword.language.section.karate"
            },
            "2": {
              "name": "constant.character.section.colon.karate"
            },
            "3": {
              "name": "string.unquoted.text.karate",
              "patterns": [
                {
                  "include": "meta.embedded.inline.xml"
                }
              ]
            }
          }
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.karate",
          "match": "^\\s*#.*"
        }
      ]
    },
    "tag": {
      "patterns": [
        {
          "name": "entity.name.type.tag.karate",
          "match": "^(\\s*@\\S*)+(.*)",
          "captures": {
            "2": {
              "name": "invalid.illegal.tag.karate"
            }
          }
        }
      ]
    },
    "text": {
      "patterns": [
        {
          "name": "string.unquoted.text.karate",
          "match": "^\\s*\\S+.*"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "match": "^\\s*(\\*|Given|When|Then|And|But)\\s+(.*)",
          "captures": {
            "1": {
              "name": "keyword.control.statement.karate"
            },
            "2": {
              "name": "meta.control.statement.karate",
              "patterns": [
                {
                  "include": "#http-method"
                },
                {
                  "include": "#http-status"
                },
                {
                  "include": "#evaluation"
                },
                {
                  "include": "#get"
                },
                {
                  "include": "#set"
                },
                {
                  "include": "#replace"
                },
                {
                  "include": "#remove"
                },
                {
                  "include": "#assert"
                },
                {
                  "include": "#print"
                },
                {
                  "include": "#call"
                },
                {
                  "include": "#match"
                },
                {
                  "include": "#functional-assignments"
                },
                {
                  "include": "#driver-object-expression"
                },
                {
                  "include": "#first-class-functions"
                },
                {
                  "include": "#locator-functions"
                },
                {
                  "include": "#browser-functions"
                },
                {
                  "include": "#page-functions"
                },
                {
                  "include": "#action-functions"
                },
                {
                  "include": "#state-functions"
                },
                {
                  "include": "#wait-functions"
                },
                {
                  "include": "#cookie-functions"
                },
                {
                  "include": "#types"
                }
              ]
            }
          }
        }
      ]
    },
    "data": {
      "patterns": [
        {
          "match": "^\\s*(\\|)(.*)",
          "captures": {
            "1": {
              "name": "constant.character.pipe.karate"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\|",
                  "name": "constant.character.pipe.karate"
                },
                {
                  "include": "source.json.karate"
                },
                {
                  "include": "text.xml"
                },
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "http-method": {
      "patterns": [
        {
          "match": "\\b(method)\\b(?i)(\\b(?:get|head|post|put|delete|connect|options|trace|patch)\\b)?(.*)?",
          "captures": {
            "1": {
              "name": "support.function.http-method.karate"
            },
            "2": {
              "name": "support.constant.http-method.karate"
            },
            "3": {
              "name": "support.variable.other.http-method.karate"
            }
          }
        }
      ]
    },
    "http-status": {
      "patterns": [
        {
          "match": "\\b(status)\\b\\s*(\\d{3}|<.+>)?(.*)?",
          "captures": {
            "1": {
              "name": "support.function.http-status.karate"
            },
            "2": {
              "name": "meta.statement.http-status.karate",
              "patterns": [
                {
                  "include": "source.js"
                },
                {
                  "include": "meta.embedded.inline.xml"
                }
              ]
            },
            "3": {
              "name": "invalid.illegal.http-status.karate"
            }
          }
        }
      ]
    },
    "evaluation": {
      "patterns": [
        {
          "match": "\\b(eval)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.eval.karate"
            },
            "2": {
              "name": "meta.statement.eval.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "first-class-functions": {
      "patterns": [
        {
          "match": "\\b(driver|request|params|retry\\s+until|soap\\s+action|path|url|multipart\\s+files|multipart\\s+fields|form\\s+fields|multipart\\s+entity|cookies|headers)\\b(.*)?",
          "captures": {
            "1": {
              "name": "support.function.first-class.karate"
            },
            "2": {
              "name": "meta.statement.first-class.karate",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            }
          }
        }
      ]
    },
    "locator-functions": {
      "patterns": [
        {
          "match": "\\b(leftOf|rightOf|below|above|near)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.locator.karate"
            },
            "2": {
              "name": "meta.statement.locator.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "browser-functions": {
      "patterns": [
        {
          "match": "\\b(refresh|reload|back|forward|maximize|minimize|fullscreen|quit)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.browser.karate"
            },
            "2": {
              "name": "meta.statement.browser.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "page-functions": {
      "patterns": [
        {
          "match": "\\b(dialog|switchPage|switchFrame|close|screenshot|pdf)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.page.karate"
            },
            "2": {
              "name": "meta.statement.page.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "action-functions": {
      "patterns": [
        {
          "match": "\\b(click|input|submit|focus|clear|value|select|scroll|mouse|highlight|highlightAll)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.uiaction.karate"
            },
            "2": {
              "name": "meta.statement.uiaction.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "state-functions": {
      "patterns": [
        {
          "match": "\\b(html|text|value|attribute|enabled|exists|optional|locate|locateAll|position)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.state.karate"
            },
            "2": {
              "name": "meta.statement.state.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "wait-functions": {
      "patterns": [
        {
          "match": "\\b(retry|waitFor|waitForAny|waitForUrl|waitForText|waitForEnabled|waitForResultCount|waitUntil|delay|script|scriptAll|timeout)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.wait.karate"
            },
            "2": {
              "name": "meta.statement.wait.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "cookie-functions": {
      "patterns": [
        {
          "match": "\\b(cookie|deleteCookie|clearCookies)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.cookie.karate"
            },
            "2": {
              "name": "meta.statement.cookie.karate",
              "patterns": [
                {
                  "include": "#strings"
                }
              ]
            }
          }
        }
      ]
    },
    "get": {
      "patterns": [
        {
          "match": "\\b(get)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.get.karate"
            },
            "2": {
              "name": "meta.statement.get.karate",
              "patterns": [
                {
                  "include": "source.json.karate"
                }
              ]
            }
          }
        }
      ]
    },
    "set": {
      "patterns": [
        {
          "match": "\\b(set)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.set.karate"
            },
            "2": {
              "name": "meta.statement.set.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "replace": {
      "patterns": [
        {
          "match": "\\b(replace)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.replace.karate"
            },
            "2": {
              "name": "meta.statement.replace.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "remove": {
      "patterns": [
        {
          "match": "\\b(remove)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.remove.karate"
            },
            "2": {
              "name": "meta.statement.remove.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "functional-assignments": {
      "patterns": [
        {
          "match": "\\b(param|header|cookie|form\\s+field|multipart\\s+field|multipart\\s+file|form\\s+field)\\b",
          "name": "support.function.assignment.karate"
        },
        {
          "include": "#assignment"
        }
      ]
    },
    "assert": {
      "patterns": [
        {
          "match": "\\b(assert)\\b(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.assert.karate"
            },
            "2": {
              "name": "meta.statement.assert.karate",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          }
        }
      ]
    },
    "match": {
      "patterns": [
        {
          "match": "\\b(match(?:\\s+each)?)\\b(.*)\\s+(==|!=|contains\\s+only|contains\\s+any|!contains|contains)\\s+(.*)",
          "captures": {
            "1": {
              "name": "support.function.match.karate"
            },
            "2": {
              "name": "meta.statement.action.match.karate",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            "3": {
              "name": "keyword.operator.comparison.match.karate"
            },
            "4": {
              "name": "meta.statement.action.match.karate",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "include": "#type-table"
        },
        {
          "include": "#type-text"
        },
        {
          "include": "#type-generic"
        }
      ]
    },
    "type-table": {
      "patterns": [
        {
          "match": "\\b(table)\\b\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.type.table.karate"
            },
            "2": {
              "name": "support.variable.other.karate"
            }
          }
        }
      ]
    },
    "type-text": {
      "patterns": [
        {
          "match": "\\b(text)\\b\\s*(.*)$",
          "captures": {
            "1": {
              "name": "keyword.other.type.text.karate"
            },
            "2": {
              "name": "meta.assignment.karate",
              "patterns": [
                {
                  "include": "#assignment"
                }
              ]
            }
          }
        }
      ]
    },
    "type-generic": {
      "patterns": [
        {
          "match": "\\b(def|yaml|csv|string|json|xml|xmlstring|bytes|copy|configure)\\b\\s*(.*)$",
          "captures": {
            "1": {
              "name": "keyword.other.type.karate"
            },
            "2": {
              "name": "meta.assignment.karate",
              "patterns": [
                {
                  "include": "#assignment"
                }
              ]
            }
          }
        }
      ]
    },
    "assignment": {
      "patterns": [
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(.*)",
          "captures": {
            "1": {
              "name": "support.variable.other.karate"
            },
            "2": {
              "name": "keyword.operator.equal.karate"
            },
            "3": {
              "name": "meta.variable.other.karate",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#driver-object-expression"
        },
        {
          "include": "#state-functions"
        },
        {
          "include": "#cookie-functions"
        },
        {
          "include": "#page-functions"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#print"
        },
        {
          "include": "#call"
        },
        {
          "include": "#read"
        },
        {
          "include": "#evaluation"
        },
        {
          "include": "#get"
        },
        {
          "include": "source.json.karate"
        },
        {
          "include": "text.xml"
        },
        {
          "include": "source.js"
        }
      ]
    },
    "call": {
      "patterns": [
        {
          "match": "\\b(call(?:once)?)\\b\\s+(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.call.karate"
            },
            "2": {
              "name": "meta.statement.call.karate",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            }
          }
        }
      ]
    },
    "read": {
      "patterns": [
        {
          "match": "\\b(read(?:once)?)\\b\\s*([^)]+)\\s*(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.read.karate"
            },
            "2": {
              "name": "meta.statement.read.karate",
              "patterns": [
                {
					"include": "source.js"
				}
              ]
            },
            "3": {
              "name": "meta.args.read.karate",
              "patterns": [
                {
                  "include": "source.json.karate"
                }
              ]
            }
          }
        }
      ]
    },
    "print": {
      "patterns": [
        {
          "match": "\\b(print(?:once)?)\\b\\s+(.*)?",
          "captures": {
            "1": {
              "name": "keyword.other.print.karate"
            },
            "2": {
              "name": "meta.statement.print.karate",
              "patterns": [
                {
                  "include": "#strings"
                }
              ]
            }
          }
        }
      ]
    },
    "driver-object-expression": {
      "patterns": [
        {
          "match": "(driver(?:once)?)(\\.)([_$[:alpha:]][_$[:alnum:]]*)\\b(?:\\((.*)\\))*",
          "captures": {
            "1": {
              "name": "support.class.karate"
            },
            "2": {
              "name": "keyword.operator.dot.karate"
            },
            "3": {
              "name": "support.function.karate"
            },
            "4": {
              "name": "meta.args.karate",
              "patterns": [
                {
                  "include": "#strings"
                },
                {
                  "include": "source.json.karate"
                }
              ]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "include": "#singlequote-string"
        },
        {
          "include": "#doublequote-string"
        }
      ]
    },
    "singlequote-string": {
      "patterns": [
        {
          "match": "(')([^']*)(')",
          "captures": {
            "1": {
              "name": "string.quoted.single.karate"
            },
            "2": {
              "name": "string.quoted.single.karate",
              "patterns": [
                {
                  "include": "meta.embedded.inline.xml"
                }
              ]
            },
            "3": {
              "name": "string.quoted.single.karate"
            }
          }
        }
      ]
    },
    "doublequote-string": {
      "patterns": [
        {
          "match": "(\")([^\"]*)(\")",
          "captures": {
            "1": {
              "name": "string.quoted.double.karate"
            },
            "2": {
              "name": "string.quoted.double.karate",
              "patterns": [
                {
                  "include": "meta.embedded.inline.xml"
                }
              ]
            },
            "3": {
              "name": "string.quoted.double.karate"
            }
          }
        }
      ]
    },
    "tripplequote-expression": {
      "begin": "(^|\\G)\\s*[\"]{3}\\s*$",
      "end": "(^|\\G)\\s*[\"]{3}\\s*$",
      "contentName": "meta.embedded.block",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.triple.karate"
        }
      },
      "endCaptures": {
        "0": {
          "name": "string.quoted.triple.karate"
        }
      },
      "patterns": [
        {
          "begin": "^(\\s*)(?=[{\\[])",
          "while": "^(?!\\s*[\"]{3}\\s*)",
          "contentName": "meta.embedded.block.json",
          "patterns": [
            {
              "include": "source.json.karate"
            }
          ]
        },
        {
          "begin": "^(\\s*)(?=[<])",
          "while": "^(?!\\s*[\"]{3}\\s*)",
          "contentName": "meta.embedded.block.xml",
          "patterns": [
            {
              "include": "text.xml"
            }
          ]
        },
        {
          "begin": "^(\\s*)(?=[\\S&&[^{<\\[]])",
          "while": "^(?!\\s*[\"]{3}\\s*)",
          "contentName": "meta.embedded.block.javascript",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    }
  }
}